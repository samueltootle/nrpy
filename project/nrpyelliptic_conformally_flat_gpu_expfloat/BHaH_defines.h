// BHaH core header file, automatically generated from output_BHaH_defines_h within BHaH_defines_h.py,
//    DO NOT EDIT THIS FILE BY HAND.

//********************************************
// Basic definitions for module general:
#include <ctype.h>   // Character type functions, such as isdigit, isalpha, etc.
#include <errno.h>   // Error number definitions
#include <math.h>    // Transcendental functions, etc.
#include <stdbool.h> // bool-typed variables
#include <stdint.h>  // int8_t-typed variables
#include <stdio.h>   // Basic input/output functions, such as *printf, fopen, fwrite, etc.
#include <stdlib.h>  // malloc/free, etc.
#include <string.h>  // String handling functions, such as strlen, strcmp, etc.
#include <time.h>    // Time-related functions and types, such as time(), clock(),
#define REAL double

#define MIN(A, B) (((A) < (B)) ? (A) : (B))
#define MAX(A, B) (((A) > (B)) ? (A) : (B))
#define SQR(A) ((A) * (A))
// START: CodeParameters declared as #define.
#ifndef MAXNUMGRIDS
#define MAXNUMGRIDS 15 // nrpy.grid
#endif
#ifndef M_PI
#define M_PI // nrpy.reference_metric_SinhSymTP
#endif
#ifndef M_SQRT1_2
#define M_SQRT1_2 // nrpy.reference_metric_SinhSymTP
#endif
// END: CodeParameters declared as #define.

#define restrict __restrict__

//********************************************
// Basic definitions for module nrpy.infrastructures.BHaH.diagnostics.progress_indicator:
#ifdef __linux__
// Timer with nanosecond resolution. Only on Linux.
#define TIMEVAR struct timespec
#define CURRTIME_FUNC(currtime) clock_gettime(CLOCK_REALTIME, currtime)
#define TIME_IN_NS(start, end) (REAL)(1000000000L * (end.tv_sec - start.tv_sec) + end.tv_nsec - start.tv_nsec);
#else
// Low-resolution timer, 1-second resolution. Widely available.
#define TIMEVAR time_t
#define CURRTIME_FUNC(currtime) time(currtime)
#define TIME_IN_NS(start, end) (REAL)(difftime(end, start) * 1.0e9 + 1e-6) // Round up to avoid divide-by-zero.
#endif

//********************************************
// Basic definitions for module commondata_struct:
typedef struct __commondata_struct__ {
  REAL CFL_FACTOR;               // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::CFL_FACTOR
  REAL MINIMUM_GLOBAL_WAVESPEED; // nrpy.equations.nrpyelliptic.CommonParams::MINIMUM_GLOBAL_WAVESPEED
  REAL P0_x;                     // nrpy.equations.nrpyelliptic.CommonParams::P0_x
  REAL P0_y;                     // nrpy.equations.nrpyelliptic.CommonParams::P0_y
  REAL P0_z;                     // nrpy.equations.nrpyelliptic.CommonParams::P0_z
  REAL P1_x;                     // nrpy.equations.nrpyelliptic.CommonParams::P1_x
  REAL P1_y;                     // nrpy.equations.nrpyelliptic.CommonParams::P1_y
  REAL P1_z;                     // nrpy.equations.nrpyelliptic.CommonParams::P1_z
  REAL S0_x;                     // nrpy.equations.nrpyelliptic.CommonParams::S0_x
  REAL S0_y;                     // nrpy.equations.nrpyelliptic.CommonParams::S0_y
  REAL S0_z;                     // nrpy.equations.nrpyelliptic.CommonParams::S0_z
  REAL S1_x;                     // nrpy.equations.nrpyelliptic.CommonParams::S1_x
  REAL S1_y;                     // nrpy.equations.nrpyelliptic.CommonParams::S1_y
  REAL S1_z;                     // nrpy.equations.nrpyelliptic.CommonParams::S1_z
  REAL bare_mass_0;              // nrpy.equations.nrpyelliptic.CommonParams::bare_mass_0
  REAL bare_mass_1;              // nrpy.equations.nrpyelliptic.CommonParams::bare_mass_1
  REAL checkpoint_every;         // nrpy.infrastructures.BHaH.checkpoints.base_checkpointing::checkpoint_every
  REAL convergence_factor;       // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::convergence_factor
  REAL dt;                       // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::dt
  REAL eta_damping;              // nrpy.equations.nrpyelliptic.CommonParams::eta_damping
  REAL log10_current_residual;   // nrpy.infrastructures.BHaH.nrpyelliptic.base_conformally_flat_C_codegen_library::log10_current_residual
  REAL log10_residual_tolerance; // nrpy.infrastructures.BHaH.nrpyelliptic.base_conformally_flat_C_codegen_library::log10_residual_tolerance
  REAL t_0;                      // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::t_0
  REAL t_final;                  // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::t_final
  REAL time;                     // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::time
  REAL zPunc;                    // nrpy.equations.nrpyelliptic.CommonParams::zPunc
  TIMEVAR start_wallclock_time;  // nrpy.infrastructures.BHaH.diagnostics.progress_indicator::start_wallclock_time
  bool stop_relaxation;          // nrpy.infrastructures.BHaH.nrpyelliptic.base_conformally_flat_C_codegen_library::stop_relaxation
  int NUMGRIDS;                  // nrpy.grid::NUMGRIDS
  int diagnostics_output_every;  // nrpy.infrastructures.BHaH.nrpyelliptic.base_conformally_flat_C_codegen_library::diagnostics_output_every
  int nn;                        // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::nn
  int nn_0;                      // nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL::nn_0
  int nn_max;                    // nrpy.infrastructures.BHaH.nrpyelliptic.base_conformally_flat_C_codegen_library::nn_max
  int output_progress_every;     // nrpy.infrastructures.BHaH.diagnostics.progress_indicator::output_progress_every
  char gridding_choice[200];     // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::gridding_choice
  char outer_bc_type[50];        // nrpy.infrastructures.BHaH.CurviBoundaryConditions.cuda.CurviBoundaryConditions::outer_bc_type
} commondata_struct;

//********************************************
// Basic definitions for module params_struct:
typedef struct __params_struct__ {
  REAL AMAX;                // nrpy.reference_metric_SinhSymTP::AMAX
  REAL Cart_originx;        // nrpy.grid::Cart_originx
  REAL Cart_originy;        // nrpy.grid::Cart_originy
  REAL Cart_originz;        // nrpy.grid::Cart_originz
  REAL SINHWAA;             // nrpy.reference_metric_SinhSymTP::SINHWAA
  REAL bScale;              // nrpy.reference_metric_SinhSymTP::bScale
  REAL dxx0;                // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::dxx0
  REAL dxx1;                // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::dxx1
  REAL dxx2;                // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::dxx2
  REAL f0_of_xx0;           // nrpy.reference_metric_SinhSymTP::f0_of_xx0
  REAL f0_of_xx0__D0;       // nrpy.reference_metric_SinhSymTP::f0_of_xx0__D0
  REAL f0_of_xx0__DD00;     // nrpy.reference_metric_SinhSymTP::f0_of_xx0__DD00
  REAL f0_of_xx0__DDD000;   // nrpy.reference_metric_SinhSymTP::f0_of_xx0__DDD000
  REAL f1_of_xx1;           // nrpy.reference_metric_SinhSymTP::f1_of_xx1
  REAL f1_of_xx1__D1;       // nrpy.reference_metric_SinhSymTP::f1_of_xx1__D1
  REAL f1_of_xx1__DD11;     // nrpy.reference_metric_SinhSymTP::f1_of_xx1__DD11
  REAL f1_of_xx1__DDD111;   // nrpy.reference_metric_SinhSymTP::f1_of_xx1__DDD111
  REAL f2_of_xx0;           // nrpy.reference_metric_SinhSymTP::f2_of_xx0
  REAL f2_of_xx0__D0;       // nrpy.reference_metric_SinhSymTP::f2_of_xx0__D0
  REAL f2_of_xx0__DD00;     // nrpy.reference_metric_SinhSymTP::f2_of_xx0__DD00
  REAL f3_of_xx2;           // nrpy.reference_metric_SinhSymTP::f3_of_xx2
  REAL f3_of_xx2__D2;       // nrpy.reference_metric_SinhSymTP::f3_of_xx2__D2
  REAL f3_of_xx2__DD22;     // nrpy.reference_metric_SinhSymTP::f3_of_xx2__DD22
  REAL f4_of_xx1;           // nrpy.reference_metric_SinhSymTP::f4_of_xx1
  REAL f4_of_xx1__D1;       // nrpy.reference_metric_SinhSymTP::f4_of_xx1__D1
  REAL f4_of_xx1__DD11;     // nrpy.reference_metric_SinhSymTP::f4_of_xx1__DD11
  REAL f4_of_xx1__DDD111;   // nrpy.reference_metric_SinhSymTP::f4_of_xx1__DDD111
  REAL grid_physical_size;  // nrpy.reference_metric::grid_physical_size
  REAL invdxx0;             // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::invdxx0
  REAL invdxx1;             // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::invdxx1
  REAL invdxx2;             // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::invdxx2
  REAL xxmax0;              // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::xxmax0
  REAL xxmax1;              // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::xxmax1
  REAL xxmax2;              // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::xxmax2
  REAL xxmin0;              // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::xxmin0
  REAL xxmin1;              // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::xxmin1
  REAL xxmin2;              // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::xxmin2
  bool grid_rotates;        // nrpy.grid::grid_rotates
  int CoordSystem_hash;     // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::CoordSystem_hash
  int Nxx0;                 // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::Nxx0
  int Nxx1;                 // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::Nxx1
  int Nxx2;                 // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::Nxx2
  int Nxx_plus_2NGHOSTS0;   // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::Nxx_plus_2NGHOSTS0
  int Nxx_plus_2NGHOSTS1;   // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::Nxx_plus_2NGHOSTS1
  int Nxx_plus_2NGHOSTS2;   // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::Nxx_plus_2NGHOSTS2
  int grid_idx;             // nrpy.infrastructures.BHaH.grid_management.cuda.numerical_grids_and_timestep::grid_idx
  char CoordSystemName[50]; // nrpy.reference_metric::CoordSystemName
} params_struct;

//********************************************
// Basic definitions for module finite_difference:

// Set the number of ghost zones
// Note that upwinding in e.g., BSSN requires that NGHOSTS = fd_order/2 + 1 <- Notice the +1.
#define NGHOSTS 5

// When enable_simd = False, this is the UPWIND_ALG() macro:
#define UPWIND_ALG(UpwindVecU) UpwindVecU > 0.0 ? 1.0 : 0.0

//********************************************
// Basic definitions for module reference_metric:
typedef struct __rfmstruct__ {
  REAL *f0_of_xx0;
  REAL *f0_of_xx0__D0;
  REAL *f0_of_xx0__DD00;
  REAL *f0_of_xx0__DDD000;
  REAL *f1_of_xx1;
  REAL *f1_of_xx1__D1;
  REAL *f1_of_xx1__DD11;
  REAL *f2_of_xx0;
  REAL *f2_of_xx0__D0;
  REAL *f2_of_xx0__DD00;
  REAL *f4_of_xx1;
  REAL *f4_of_xx1__D1;
  REAL *f4_of_xx1__DD11;
} rfm_struct;

//********************************************
// Basic definitions for module nrpy.infrastructures.BHaH.CurviBoundaryConditions.cuda.CurviBoundaryConditions:

// NRPy+ Curvilinear Boundary Conditions: Core data structures
// Documented in: Tutorial-Start_to_Finish-Curvilinear_BCs.ipynb

typedef struct __innerpt_bc_struct__ {
  int dstpt;         // dstpt is the 3D grid index IDX3S(i0,i1,i2) of the inner boundary point (i0,i1,i2)
  int srcpt;         // srcpt is the 3D grid index (a la IDX3S) to which the inner boundary point maps
  int8_t parity[10]; // parity[10] is a calculation of dot products for the 10 independent parity types
} innerpt_bc_struct;

typedef struct __outerpt_bc_struct__ {
  short i0, i1, i2;              // the outer boundary point grid index (i0,i1,i2), on the 3D grid
  int8_t FACEX0, FACEX1, FACEX2; // 1-byte integers that store
  //                               FACEX0,FACEX1,FACEX2 = +1, 0, 0 if on the i0=i0min face,
  //                               FACEX0,FACEX1,FACEX2 = -1, 0, 0 if on the i0=i0max face,
  //                               FACEX0,FACEX1,FACEX2 =  0,+1, 0 if on the i1=i2min face,
  //                               FACEX0,FACEX1,FACEX2 =  0,-1, 0 if on the i1=i1max face,
  //                               FACEX0,FACEX1,FACEX2 =  0, 0,+1 if on the i2=i2min face, or
  //                               FACEX0,FACEX1,FACEX2 =  0, 0,-1 if on the i2=i2max face,
} outerpt_bc_struct;

typedef struct __bc_info_struct__ {
  int num_inner_boundary_points;                  // stores total number of inner boundary points
  int num_pure_outer_boundary_points[NGHOSTS][3]; // stores number of outer boundary points on each
  //                                                  ghostzone level and direction (update min and
  //                                                  max faces simultaneously on multiple cores)
  int bc_loop_bounds[NGHOSTS][6][6]; // stores outer boundary loop bounds. Unused after bcstruct_set_up()
} bc_info_struct;

typedef struct __bc_struct__ {
  innerpt_bc_struct *inner_bc_array;                   // information needed for updating each inner boundary point
  outerpt_bc_struct *pure_outer_bc_array[NGHOSTS * 3]; // information needed for updating each outer
  //                                                             boundary point
  bc_info_struct bc_info; // stores number of inner and outer boundary points, needed for setting loop
  //                          bounds and parallelizing over as many boundary points as possible.
} bc_struct;

/* PARITY TYPES FOR EVOLVED (plus optional) GRIDFUNCTIONS.
 * SEE "Tutorial-Start_to_Finish-Curvilinear_BCs.ipynb" FOR DEFINITIONS. */
static const int8_t evol_gf_parity[2] = {0, 0};

//********************************************
// Basic definitions for module nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL:
typedef struct __MoL_gridfunctions_struct__ {
  REAL *y_n_gfs;
  REAL *y_nplus1_running_total_gfs;
  REAL *k_odd_gfs;
  REAL *k_even_gfs;
  REAL *auxevol_gfs;
  REAL *diagnostic_output_gfs;
  REAL *diagnostic_output_gfs2;
} MoL_gridfunctions_struct;

//********************************************
// Basic definitions for module grid:

// EVOL VARIABLES:
#define NUM_EVOL_GFS 2
#define UUGF 0
#define VVGF 1

// SET gridfunctions_f_infinity[i] = evolved gridfunction i's value in the limit r->infinity:
static const REAL gridfunctions_f_infinity[NUM_EVOL_GFS] = {0.0, 0.0};

// SET gridfunctions_wavespeed[i] = evolved gridfunction i's characteristic wave speed:
static const REAL gridfunctions_wavespeed[NUM_EVOL_GFS] = {1.0, 1.0};

// AUX VARIABLES:
#define NUM_AUX_GFS 1
#define RESIDUAL_HGF 0

// AUXEVOL VARIABLES:
#define NUM_AUXEVOL_GFS 3
#define ADD_TIMES_AUUGF 0
#define PSI_BACKGROUNDGF 1
#define VARIABLE_WAVESPEEDGF 2

// Declare the IDX4(gf,i,j,k) macro, which enables us to store 4-dimensions of
//   data in a 1D array. In this case, consecutive values of "i"
//   (all other indices held to a fixed value) are consecutive in memory, where
//   consecutive values of "j" (fixing all other indices) are separated by
//   Nxx_plus_2NGHOSTS0 elements in memory. Similarly, consecutive values of
//   "k" are separated by Nxx_plus_2NGHOSTS0*Nxx_plus_2NGHOSTS1 in memory, etc.
#define IDX4(g, i, j, k) ((i) + Nxx_plus_2NGHOSTS0 * ((j) + Nxx_plus_2NGHOSTS1 * ((k) + Nxx_plus_2NGHOSTS2 * (g))))
#define IDX4pt(g, idx) ((idx) + (Nxx_plus_2NGHOSTS0 * Nxx_plus_2NGHOSTS1 * Nxx_plus_2NGHOSTS2) * (g))
#define IDX3(i, j, k) ((i) + Nxx_plus_2NGHOSTS0 * ((j) + Nxx_plus_2NGHOSTS1 * ((k))))
#define LOOP_REGION(i0min, i0max, i1min, i1max, i2min, i2max)                                                                                        \
  for (int i2 = i2min; i2 < i2max; i2++)                                                                                                             \
    for (int i1 = i1min; i1 < i1max; i1++)                                                                                                           \
      for (int i0 = i0min; i0 < i0max; i0++)
#define LOOP_OMP(__OMP_PRAGMA__, i0, i0min, i0max, i1, i1min, i1max, i2, i2min, i2max)                                                               \
  _Pragma(__OMP_PRAGMA__) for (int(i2) = (i2min); (i2) < (i2max); (i2)++) for (int(i1) = (i1min); (i1) < (i1max);                                    \
                                                                               (i1)++) for (int(i0) = (i0min); (i0) < (i0max); (i0)++)
#define LOOP_NOOMP(i0, i0min, i0max, i1, i1min, i1max, i2, i2min, i2max)                                                                             \
  for (int(i2) = (i2min); (i2) < (i2max); (i2)++)                                                                                                    \
    for (int(i1) = (i1min); (i1) < (i1max); (i1)++)                                                                                                  \
      for (int(i0) = (i0min); (i0) < (i0max); (i0)++)
#define LOOP_BREAKOUT(i0, i1, i2, i0max, i1max, i2max)                                                                                               \
  {                                                                                                                                                  \
    i0 = (i0max);                                                                                                                                    \
    i1 = (i1max);                                                                                                                                    \
    i2 = (i2max);                                                                                                                                    \
    break;                                                                                                                                           \
  }
#define IS_IN_GRID_INTERIOR(i0i1i2, Nxx_plus_2NGHOSTS0, Nxx_plus_2NGHOSTS1, Nxx_plus_2NGHOSTS2, NG)                                                  \
  (i0i1i2[0] >= (NG) && i0i1i2[0] < (Nxx_plus_2NGHOSTS0) - (NG) && i0i1i2[1] >= (NG) && i0i1i2[1] < (Nxx_plus_2NGHOSTS1) - (NG) &&                   \
   i0i1i2[2] >= (NG) && i0i1i2[2] < (Nxx_plus_2NGHOSTS2) - (NG))

#define IDX3INTERIOR(i, j, k) ((i) + Nxx0 * ((j) + Nxx1 * (k)))

typedef struct __griddata__ {
  // griddata_struct stores data needed on each grid
  // xx[3] stores the uniform grid coordinates.
  REAL *xx[3];
  // NRPy+ MODULE: nrpy.infrastructures.BHaH.CurviBoundaryConditions.cuda.CurviBoundaryConditions
  bc_struct bcstruct; // <- all data needed to perform boundary conditions in curvilinear coordinates
  // NRPy+ MODULE: nrpy.infrastructures.BHaH.MoLtimestepping.cuda.MoL
  MoL_gridfunctions_struct gridfuncs; // <- MoL gridfunctions
  // NRPy+ MODULE: params
  params_struct params; // <- BHaH parameters, generated from NRPy+'s CodeParameters
  // NRPy+ MODULE: reference_metric
  char CoordSystemname[100]; // <- the name of the CoordSystem (from reference_metric)
  char gridname[100];        // <- a user-defined alias for describing the grid
  rfm_struct rfmstruct;      // <- includes e.g., 1D arrays of reference metric quantities
} griddata_struct;

//********************************************
// Basic definitions for module nrpy.infrastructures.BHaH.rfm_wrapper_functions:
#define SINHSYMTP 547012997

//********************************************
// Basic definitions for module ADDITIONAL GPU DIAGNOSTICS:
#define L2_DVGF 0
#define L2_SQUARED_DVGF 1

//********************************************
// Basic definitions for module ADDITIONAL HOST DIAGNOSTICS:
#define HOST_RESIDUAL_HGF 0
#define HOST_UUGF 1
#define NUM_HOST_DIAG 2

#include "BHaH_gpu_defines.h"
